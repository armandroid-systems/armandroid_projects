package recibos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import recibos.Tareas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TAREAS.
*/
public class TareasDao extends AbstractDao<Tareas, Long> {

    public static final String TABLENAME = "TAREAS";

    /**
     * Properties of entity Tareas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Snr = new Property(1, String.class, "snr", false, "SNR");
        public final static Property Latitud = new Property(2, String.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(3, String.class, "longitud", false, "LONGITUD");
        public final static Property Fechahora = new Property(4, String.class, "fechahora", false, "FECHAHORA");
        public final static Property BcRecibo = new Property(5, String.class, "bcRecibo", false, "BC_RECIBO");
        public final static Property Cuenta = new Property(6, String.class, "cuenta", false, "CUENTA");
        public final static Property Servicio = new Property(7, String.class, "servicio", false, "SERVICIO");
        public final static Property Atendido = new Property(8, String.class, "atendido", false, "ATENDIDO");
    };


    public TareasDao(DaoConfig config) {
        super(config);
    }
    
    public TareasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TAREAS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SNR' TEXT," + // 1: snr
                "'LATITUD' TEXT," + // 2: latitud
                "'LONGITUD' TEXT," + // 3: longitud
                "'FECHAHORA' TEXT," + // 4: fechahora
                "'BC_RECIBO' TEXT," + // 5: bcRecibo
                "'CUENTA' TEXT," + // 6: cuenta
                "'SERVICIO' TEXT," + // 7: servicio
                "'ATENDIDO' TEXT);"); // 8: atendido
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TAREAS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tareas entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String snr = entity.getSnr();
        if (snr != null) {
            stmt.bindString(2, snr);
        }
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(3, latitud);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(4, longitud);
        }
 
        String fechahora = entity.getFechahora();
        if (fechahora != null) {
            stmt.bindString(5, fechahora);
        }
 
        String bcRecibo = entity.getBcRecibo();
        if (bcRecibo != null) {
            stmt.bindString(6, bcRecibo);
        }
 
        String cuenta = entity.getCuenta();
        if (cuenta != null) {
            stmt.bindString(7, cuenta);
        }
 
        String servicio = entity.getServicio();
        if (servicio != null) {
            stmt.bindString(8, servicio);
        }
 
        String atendido = entity.getAtendido();
        if (atendido != null) {
            stmt.bindString(9, atendido);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Tareas readEntity(Cursor cursor, int offset) {
        Tareas entity = new Tareas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // snr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // latitud
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longitud
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fechahora
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bcRecibo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cuenta
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // servicio
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // atendido
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tareas entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSnr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitud(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitud(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFechahora(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBcRecibo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCuenta(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setServicio(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAtendido(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Tareas entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Tareas entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
